!function(){"use strict";function e(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const t={formSelector:".form",inputSelector:".form__input",submitButtonSelector:".form__submit-button",inactiveButtonClass:"form__submit-button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__input_error_active"},r=document.querySelector(".card-popup"),n=document.querySelector(".card-creator-popup"),i=document.querySelector(".profile-popup"),o=document.querySelector(".profile-avatar-popup"),s=document.querySelector(".confirm-popup"),a={profileName:document.querySelector(".profile__name"),profileAbout:document.querySelector(".profile__about"),profileAvatar:document.querySelector(".profile__avatar")},l=(document.querySelector(".profile__avatar-edit-button"),document.querySelector(".cards")),u={cardPreviewPopup:r,cardPreviewPopupImage:r.querySelector(".card-popup__image"),cardPreviewPopupTitle:r.querySelector(".card-popup__name"),closeCardPreviewPopupButton:r.querySelector(".card-popup__close-button")},d={popupConfirmElement:s},c={cardCreatorPopupElement:n,openCardCreatorPopupButton:document.getElementById("add")},h={profileEditPopupElement:i,profileNameInput:i.querySelector(".form__input_el_user-name"),profileAboutInput:i.querySelector(".form__input_el_user-about"),openProfileEditPopupButton:document.getElementById("info-edit")},p={profileAvatarEditPopupElement:o,profileAvatarLinkInput:o.querySelector(".form__input_el_avatar-link"),openProfileAvatarEditPopupButton:document.getElementById("avatar-edit")},m={};function _(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function f(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var E=class{constructor(e){f(this,"_addEventListeners",(()=>{document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("click",this._handleRemoteClick),this._popupElement.querySelector(".popup__close-button").addEventListener("click",this._handleCloseButton)})),f(this,"_removeEventListeners",(()=>{document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("click",this._handleRemoteClick),this._popupElement.querySelector(".popup__close-button").removeEventListener("click",this._handleCloseButton)})),f(this,"_handleEscClose",(e=>{"Escape"===e.key&&this.close()})),f(this,"_handleRemoteClick",(e=>{const t=document.querySelector(".popup__page-overlay");e.target.isEqualNode(t)&&this.close()})),f(this,"_handleCloseButton",(()=>{this.close()})),this._popupElement=e}open(){this._popupElement.classList.add("popup_visible"),this._addEventListeners()}close(){this._popupElement.classList.remove("popup_visible"),this._removeEventListeners()}};function b(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var v=class extends E{constructor(e){let{popupElement:t,handleFormSubmit:r}=e;super(t),b(this,"addSubmitButtonListener",(()=>{this._formElement.addEventListener("submit",this._handlePopupFormSubmit)})),b(this,"removeSubmitButtonListener",(()=>{this._formElement.removeEventListener("submit",this._handlePopupFormSubmit)})),b(this,"_handlePopupFormSubmit",(e=>{e.preventDefault(),this._submitButton.textContent="Saving...",this._handleFormSubmit(this._getInputValues(),this._submitButton)})),b(this,"_getInputValues",(()=>{const e={};return[...this._formElement.querySelectorAll(".form__input")].forEach((t=>e[t.name]=t.value)),e})),this._handleFormSubmit=r,this._formElement=this._popupElement.querySelector(".form"),this._submitButton=this._popupElement.querySelector(".form__submit-button")}open(){super.open(),this.addSubmitButtonListener()}close(){super.close(),this.removeSubmitButtonListener()}};function C(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function k(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}const{profileName:y,profileAbout:S,profileAvatar:L}=a,{cardPreviewPopup:g}=u,{popupConfirmElement:P}=d,{cardCreatorPopupElement:I,openCardCreatorPopupButton:B}=c,{profileEditPopupElement:A,profileNameInput:q,profileAboutInput:w,openProfileEditPopupButton:F}=h,{profileAvatarEditPopupElement:U,openProfileAvatarEditPopupButton:T}=p;let x;const N=new class{constructor(e){let{baseUrl:t,headers:r}=e;k(this,"initAllPromise",(()=>Promise.all([this.getInitialCards(),this.getUserInfo()]))),k(this,"_defaultFetch",((e,t)=>fetch(e,t).then((e=>e.ok?e.json():Promise.reject(e.status))).catch((e=>console.log("Error: ".concat(e)))))),this._baseUrl=t,this._headers=r}getUserInfo(){return this._defaultFetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:this._headers})}uploadUserInfo(e){return this._defaultFetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",body:JSON.stringify(e),headers:this._headers})}uploadProfileAvatar(e){return this._defaultFetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",body:JSON.stringify({avatar:e}),headers:this._headers})}getInitialCards(){return this._defaultFetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:this._headers})}uploadCard(e){return this._defaultFetch("".concat(this._baseUrl,"/cards"),{method:"POST",body:JSON.stringify(e),headers:this._headers})}deleteCard(e){return this._defaultFetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers})}likeCard(e){return this._defaultFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers})}dislikeCard(e){return this._defaultFetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"21827e70-d261-4f64-a3bc-4b52f52216ed","Content-Type":"application/json"}});N.initAllPromise().then((e=>{let[t,r]=e;j.setUserInfo({name:r.name,job:r.about,id:r._id}),j.setUserAvatar(r.avatar),x=r._id})),N.getUserInfo().then((e=>{j.setUserInfo({name:e.name,about:e.about})})),N.getInitialCards().then((e=>{console.log(e),D.renderItems(e)}));const j=new class{constructor(e){_(this,"getUserInfo",(()=>({profileName:this._userName.textContent,profileAbout:this._userAbout.textContent}))),_(this,"setUserInfo",(e=>{const{name:t,about:r,id:n}=e;this._userName.textContent=t,this._userAbout.textContent=r,this._userId=n})),_(this,"setUserAvatar",(e=>{this._userAvatar.style.backgroundImage='url("'.concat(e,'")')}));const{userNameElement:t,userAboutElement:r,userAvatarElement:n}=e;this._userName=t,this._userAbout=r,this._userAvatar=n}}({userNameElement:y,userAboutElement:S,userAvatarElement:L}),O=new class extends E{constructor(){var e,t;super(...arguments),t=e=>{const{name:t,link:r}=e,{cardPreviewPopupTitle:n,cardPreviewPopupImage:i}=u;n.textContent=t,i.src=r,i.alt="Photo of ".concat(r),super.open()},(e="open")in this?Object.defineProperty(this,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):this.open=t}}(g),V=new class extends E{constructor(){super(...arguments),C(this,"setAction",(e=>{this._submitButtonHandler=e})),C(this,"open",(()=>{super.open(),this.addConfirmButtonListener()})),C(this,"addConfirmButtonListener",(()=>{this._popupElement.addEventListener("submit",this._handlePopupConfirmButton)})),C(this,"removeConfirmButtonListener",(()=>{this._popupElement.removeEventListener("submit",this._handlePopupConfirmButton)})),C(this,"_handlePopupConfirmButton",(e=>{e.preventDefault(),this._submitButtonHandler()}))}close(){super.close(),this.removeConfirmButtonListener()}}(P),D=new class{constructor(e,t){let{renderer:r}=e;this._renderer=r,this._container=t}renderItems(e){e.forEach((e=>{this._renderer(e)}))}addItemToEnd(e){this._container.append(e)}addItemToBegin(e){this._container.prepend(e)}}({renderer:e=>{D.addItemToEnd(H(e))}},l),H=t=>{const r=new class{constructor(t,r,n){let{data:i,handleCardClick:o,handleDeleteCard:s,handleLikeCard:a}=t;e(this,"delete",(()=>{this._cardElement.remove(),this._cardElement=null})),e(this,"isLiked",(()=>this._likes.some((e=>e._id===this._userId)))),e(this,"updateLikes",(e=>{this._likes=e,this._likesAmount.textContent=this._likes.length,this._likeButton.classList.toggle("cards__like-button_active")})),e(this,"_setEventListeners",(()=>{const e=this._cardElement.querySelector(".cards__photo");this._likeButton.addEventListener("click",this._handleLikeCard),this._deleteButton.addEventListener("click",this._handleDeleteCard),e.addEventListener("click",this._handleCardClick)}));const{name:l,link:u,likes:d=[],owner:c={}}=i;this._name=l,this._link=u,this._likes=d,this._ownerId=c._id,this._handleCardClick=o,this._handleDeleteCard=s,this._handleLikeCard=a,this._cardTemplateSelector=document.querySelector(r).content,this._userId=n,this._cardElement=this._cardTemplateSelector.querySelector(".cards__item").cloneNode(!0),this._deleteButton=this._cardElement.querySelector(".cards__delete-button"),this._likeButton=this._cardElement.querySelector(".cards__like-button"),this._likesAmount=this._cardElement.querySelector(".cards__likes-amount"),null==this._ownerId&&(this._ownerId=n)}create(){const e={image:this._cardElement.querySelector(".cards__photo"),name:this._cardElement.querySelector(".cards__name")};return e.image.src=this._link,e.name.textContent=this._name,e.image.alt="Photo of ".concat(this._name),this._setEventListeners(e.image),this._ownerId!==this._userId&&this._deleteButton.classList.add("card__delete-button_hidden"),this._likesAmount.textContent=this._likes.length,this.isLiked()&&(this.updateLikes(this._likes),this._likeButton.title="Dislike"),this._cardElement}}({data:t,handleCardClick:()=>{O.open(t)},handleDeleteCard:()=>{V.open(),V.setAction((()=>{N.deleteCard(t._id).then((()=>{r.delete(),V.close()}))}))},handleLikeCard:()=>{r.isLiked()?N.dislikeCard(t._id).then((e=>{r.updateLikes(e.likes)})):N.likeCard(t._id).then((e=>{r.updateLikes(e.likes)}))}},"#userCard",x);return r.create()},J=new v({popupElement:I,handleFormSubmit:(e,t)=>{N.uploadCard(e).then((()=>{D.addItemToBegin(H(e)),J.close()})).finally(setTimeout((()=>{t.textContent="Create"}),1e3))}}),R=new v({popupElement:A,handleFormSubmit:(e,t)=>{N.uploadUserInfo(e).then((()=>{j.setUserInfo(e),R.close()})).finally(setTimeout((()=>{t.textContent="Save"}),1e3))}}),G=new v({popupElement:U,handleFormSubmit:(e,t)=>{N.uploadProfileAvatar(e.link).then((()=>{j.setUserAvatar(e.link),G.close()})).finally(setTimeout((()=>{t.textContent="Save"}),1e3))}});[...document.querySelectorAll(t.formSelector)].forEach((e=>{const r=new class{constructor(e,t){var r,n;n=()=>this._inputList.some((e=>!e.validity.valid)),(r="_hasInvalidInput")in this?Object.defineProperty(this,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):this[r]=n,this._config=e,this._formElement=t}_showInputError(e){const{inputErrorClass:t,errorClass:r}=this._config,n=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(t),n.textContent=e.validationMessage,n.classList.add(r)}_hideInputError(e){const{inputErrorClass:t,errorClass:r}=this._config,n=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(t),n.classList.remove(r),n.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_toggleButtonState(e){const{inactiveButtonClass:t}=this._config;this._hasInvalidInput()?(e.classList.add(t),e.disabled=!0):(e.classList.remove(t),e.disabled=!1)}_setEventListeners(){const{inputSelector:e,submitButtonSelector:t}=this._config;this._inputList=Array.from(this._formElement.querySelectorAll(e)),this._buttonElement=this._formElement.querySelector(t),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._buttonElement)}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>e.preventDefault())),this._setEventListeners(),this.resetValidation()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e)}))}resetFormInputs(){this._formElement.reset(),this._toggleButtonState(this._buttonElement)}}(t,e),n=e.getAttribute("name");m[n]=r,r.enableValidation()})),B.addEventListener("click",(()=>{m.cardCreatorForm.resetValidation(),m.cardCreatorForm.resetFormInputs(),J.open()})),F.addEventListener("click",(()=>{m.profileEditForm.resetValidation();const e=j.getUserInfo();R.open(),q.value=e.profileName,w.value=e.profileAbout})),T.addEventListener("click",(()=>{m.profileAvatarEditForm.resetValidation(),m.profileAvatarEditForm.resetFormInputs(),G.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,